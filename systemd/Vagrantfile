Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-22.04"
  config.vm.box_version = "202407.23.0"
  config.vm.provision "shell", inline: <<-SHELL

    ##Первое задание
    
    # Создаем файл конфигурации /etc/default/watchlog
    echo '# Configuration file for my watchlog service
# Place it to /etc/default

# File and word in that file that we will be monitoring
WORD="ALERT"
LOG=/var/log/watchlog.log' | sudo tee /etc/default/watchlog

    # Создаем файл /var/log/watchlog.log и добавляем строки
    echo "This is a test log line." | sudo tee /var/log/watchlog.log
    echo "Another log line with ALERT keyword." | sudo tee -a /var/log/watchlog.log

    # Создаем скрипт /opt/watchlog.sh
    echo '#!/bin/bash

WORD=$1
LOG=$2
DATE=`date`

if grep $WORD $LOG &> /dev/null
then
  logger "$DATE: I found word, Master!"
else
  exit 0
fi' | sudo tee /opt/watchlog.sh

    # Добавляем права на выполнение скрипта
    sudo chmod +x /opt/watchlog.sh

    # Создаем юнит для сервиса
    echo '[Unit]
Description=My watchlog service

[Service]
Type=oneshot
EnvironmentFile=/etc/default/watchlog
ExecStart=/opt/watchlog.sh $WORD $LOG' | sudo tee /etc/systemd/system/watchlog.service

    # Создаем юнит для таймера
    echo '[Unit]
Description=Run watchlog script every 30 seconds

[Timer]
# Run every 30 seconds
OnCalendar=*-*-* *:*:00/30
Unit=watchlog.service

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/watchlog.timer

    # Перезагружаем systemd и запускаем таймер
    sudo systemctl daemon-reload
    sudo systemctl start watchlog.timer

    # Проверяем, что таймер запущен
    sudo systemctl status watchlog.timer

    # Проверяем логи
    #echo "Проверка логов:"
    #tail -n 1000 /var/log/syslog | grep "I found word"



    ##Второе задание

    # Устанавливаем необходимые пакеты
    apt-get update
    apt-get install -y spawn-fcgi php php-cgi php-cli apache2 libapache2-mod-fcgid

    # Создаем директорию для конфигурации spawn-fcgi
    mkdir -p /etc/spawn-fcgi

    # Создаем файл конфигурации /etc/spawn-fcgi/fcgi.conf
    echo '# You must set some working options before the "spawn-fcgi" service will work.
# If SOCKET points to a file, then this file is cleaned up by the init script.
#
# See spawn-fcgi(1) for all possible options.
#
# Example :
SOCKET=/var/run/php-fcgi.sock
OPTIONS="-u www-data -g www-data -s $SOCKET -S -M 0600 -C 32 -F 1 -- /usr/bin/php-cgi"' | sudo tee /etc/spawn-fcgi/fcgi.conf

    # Создаем юнит-файл для systemd
    echo '[Unit]
Description=Spawn-fcgi startup service by Otus
After=network.target

[Service]
Type=simple
PIDFile=/var/run/spawn-fcgi.pid
EnvironmentFile=/etc/spawn-fcgi/fcgi.conf
ExecStart=/usr/bin/spawn-fcgi -n $OPTIONS
KillMode=process

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/spawn-fcgi.service

    # Перезагружаем systemd для применения изменений
    systemctl daemon-reload

    # Запускаем сервис spawn-fcgi
    systemctl start spawn-fcgi

    # Проверяем статус сервиса
    systemctl status spawn-fcgi


    ##Третье задание

    # Устанавливаем Nginx
    apt-get update
    apt-get install -y nginx

    # Создаем шаблонный юнит-файл для Nginx
    echo '[Unit]
Description=A high performance web server and a reverse proxy server (%I)
Documentation=man:nginx(8)
After=network.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx-%I.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx-%I.conf -q -g "daemon on; master_process on;"
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g "daemon on; master_process on;"
ExecReload=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g "daemon on; master_process on;" -s reload
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx-%I.pid
TimeoutStopSec=5
KillMode=mixed

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/nginx@.service

    # Перезагружаем systemd для применения изменений
    systemctl daemon-reload

    # Создаем первый конфигурационный файл для Nginx
    echo 'pid /run/nginx-first.pid;

events {
    worker_connections 1024;
}

http {
    server {
        listen 9001;
        root /var/www/html-first;
        index index.html;
    }
}' | sudo tee /etc/nginx/nginx-first.conf

    # Создаем второй конфигурационный файл для Nginx
    echo 'pid /run/nginx-second.pid;

events {
    worker_connections 1024;
}

http {
    server {
        listen 9002;
        root /var/www/html-second;
        index index.html;
    }
}' | sudo tee /etc/nginx/nginx-second.conf

    # Создаем директории для веб-контента
    mkdir -p /var/www/html-first
    mkdir -p /var/www/html-second

    # Создаем тестовые index.html для каждого инстанса
    echo "<h1>First Nginx Instance (Port 9001)</h1>" | sudo tee /var/www/html-first/index.html
    echo "<h1>Second Nginx Instance (Port 9002)</h1>" | sudo tee /var/www/html-second/index.html

    # Запускаем оба инстанса Nginx
    systemctl start nginx@first
    systemctl start nginx@second

    # Проверяем статус инстансов
    systemctl status nginx@first
    systemctl status nginx@second

    # Проверяем, какие порты слушаются
    ss -tnulp | grep nginx

    # Проверяем список процессов Nginx
    ps afx | grep nginx
  SHELL
end
